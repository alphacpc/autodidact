colnames(mondf_g) <- c("dev1","dev2","dev3","exam")
print(mondf_g)
################################"
row_four = "Math[14;10:12] #PC[9:12]  #Francais[14;14:15]  #SVT[16;11:17] #HG[16:14]  #Anglais[13;10:11]"
class(row_four)
mondf_g = data.frame()
ncol(mondf_g) = 4
mondf_g = data.frame()
colnames(mondf_g) <- c("dev1","dev2","dev3","exam")
print(mondf_g)
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
#print(matrix_item)
mondf = data.frame(notes=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
print(mondf_g)
}
row_spliting(row_four)
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
################################"
row_four = "Math[14;10:12] #PC[9:12]  #Francais[14;14:15]  #SVT[16;11:17] #HG[16:14]  #Anglais[13;10:11]"
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(notes=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
print(mondf_g)
}
row_spliting(row_four)
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
################################"
row_four = "Math[14;10:12] #PC[9:12]  #Francais[14;14;12:15]  #SVT[16;11:17] #HG[16:14]  #Anglais[13;10:11]"
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(notes=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
print(mondf_g)
}
row_spliting(row_four)
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
################################"
row_four = "Math[14;10:12] #PC[9:12]  #Francais[14;14;12:15]  #SVT[16;11:17] #HG[16:14]  #Anglais[13;10:11]"
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(notes=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return mondf_g;
}
row_spliting(row_four)
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
################################"
row_four = "Math[14;10:12] #PC[9:12]  #Francais[14;14;12:15]  #SVT[16;11:17] #HG[16:14]  #Anglais[13;10:11]"
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(notes=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(row_four)
df = read.csv("datas/datas.csv")
#Create factor for label matieres
labels = c("Math","PC","SVT","Anglais","HG","Francais")
mat_fac = factor(labels)
length(mat_fac)
#Recup col notes to dataframe
col_notes = data.frame(df$Note)
# Job on rows 4 of df
row_four = col_notes[4,]
#Define functions
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(notes=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(row_four)
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(row_four)
test = row_spliting(row_four)
test
test$note.1
test$note.1
test[SVT,notes.3]
test['SVT','notes.3']
test[test$notes]
test$note.1
test[test$notes]
test[1]
test[1,1]
test[1]
# Job on rows 4 of df
row_four = col_notes[128,]
#Define functions
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(row_four)
# Job on rows 4 of df
row_four = col_notes[30,]
#Define functions
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(row_four)
test = row_spliting(row_four)
View(test)
test1 = row_spliting(col_notes[4,])
test2 = row_spliting(col_notes[30,])
View(test2)
View(test1)
View(test1)
View(test2)
test1 = row_spliting(col_notes[4,])
test1
test2 = row_spliting(col_notes[30,])
test2
test2 = row_spliting(col_notes[28,])
test2
test2 = row_spliting(col_notes[1,])
test2
setwd("/home/alpha/Projects/Learning/started_r_lang")
df = read.csv("datas/datas.csv")
#Create factor for label matieres
labels = c("Math","PC","SVT","Anglais","HG","Francais")
mat_fac = factor(labels)
length(mat_fac)
#Recup col notes to dataframe
col_notes = data.frame(df$Note)
#Define functions
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
mondf_g = data.frame()
row_spliting <- function(row){
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
val1 <- row_spliting(col_notes[4,])
val1 <- row_spliting(col_notes[4,])
setwd("/home/alpha/Projects/Learning/started_r_lang")
df = read.csv("datas/datas.csv")
#Create factor for label matieres
labels = c("Math","PC","SVT","Anglais","HG","Francais")
mat_fac = factor(labels)
length(mat_fac)
#Recup col notes to dataframe
col_notes = data.frame(df$Note)
#Define functions
func_sep_notes <- function(devs,exam){
count = 1
comp = as.numeric(exam)
dev1 = 0
dev2 = 0
dev3 = 0
for(i in 1:length(devs[[1]])){
if(i == 1){
dev1 = as.numeric(devs[[1]][i])
}
else if(i == 2){
dev2 = as.numeric(devs[[1]][i])
}
if(i == 3){
dev3 = as.numeric(devs[[1]][i])
}
else{
next()
}
}
return(c(dev1,dev2,dev3,comp))
}
row_spliting <- function(row){
mondf_g = data.frame()
row_list = strsplit(row_four, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(col_notes[4,])
row_spliting(col_notes[4,])
row_spliting <- function(row){
mondf_g = data.frame()
row_list = strsplit(row, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting <- function(row){
mondf_g = data.frame()
row_list = strsplit(row, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
row_spliting(col_notes[4,])
val1 <- row_spliting(col_notes[4,])
val2 <- row_spliting(col_notes[128,])
val1
val2
cbind(val1,val2)
rbind(val1,val2)
merge(val1,val2)
val2 <- row_spliting(col_notes[5,])
val2
merge(val1,val2)
merge(val1,val2, all)
merge(val1,val2, all=T)
merge(val1,val2, all.x=T)
merge(val1,val2, all.y=T)
merge(val1,val2, all=T)
merge(val1,val2)
rbind(val2,val1)
val1 = row_spliting_dataframe(col_notes[4,])
val2 = row_spliting_dataframe(col_notes[8,])
row_spliting_dataframe <- function(row){
mondf_g = data.frame()
row_list = strsplit(row, "#")
for (mat in row_list[[1]]){
label_matiere = strsplit(mat,"\\[")[[1]][1]
notes_matiere = strsplit(strsplit(mat,"\\[")[[1]][2],"]")[[1]][1]
devoirs = strsplit(strsplit(notes_matiere,":")[[1]][1],";")
comp = strsplit(notes_matiere,":")[[1]][2]
matrix_item = matrix(func_sep_notes(devoirs, comp),byrow=F, ncol=4)
mondf = data.frame(note=matrix_item,row.names=label_matiere)
mondf_g = rbind(mondf_g,mondf)
}
return(mondf_g);
}
val1 = row_spliting_dataframe(col_notes[4,])
val2 = row_spliting_dataframe(col_notes[8,])
val1
val2
(cbind(val1,val2))
(rbind(val1,val2))
